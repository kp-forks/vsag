name: Build and Publish Wheels

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to build (e.g., 3.10). If empty, builds all.'
        required: false
        type: string
      arch:
        description: 'Architecture to build (x86_64 or aarch64). If empty, builds all.'
        required: false
        type: string

jobs:
  setup-matrix:
    name: Determine Build Matrix
    runs-on: ubuntu-latest
    outputs:
      modern_matrix: ${{ steps.set-matrix.outputs.modern_matrix }}
      py36_matrix: ${{ steps.set-matrix.outputs.py36_matrix }}
    steps:
      - id: set-matrix
        name: Generate Matrix Configuration
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          py_ver="${{ github.event.inputs.python-version }}"
          arch="${{ github.event.inputs.arch }}"

          # --- Define Full Matrix for Modern Python ---
          full_modern_matrix='[
            {"python-version": "3.12", "arch": "x86_64", "runner": "ubuntu-latest", "cibw-build-id": "cp312-*"},
            {"python-version": "3.11", "arch": "x86_64", "runner": "ubuntu-latest", "cibw-build-id": "cp311-*"},
            {"python-version": "3.10", "arch": "x86_64", "runner": "ubuntu-latest", "cibw-build-id": "cp310-*"},
            {"python-version": "3.9", "arch": "x86_64", "runner": "ubuntu-latest", "cibw-build-id": "cp39-*"},
            {"python-version": "3.8", "arch": "x86_64", "runner": "ubuntu-latest", "cibw-build-id": "cp38-*"},
            {"python-version": "3.7", "arch": "x86_64", "runner": "ubuntu-latest", "cibw-build-id": "cp37-*"},
            {"python-version": "3.12", "arch": "aarch64", "runner": "ubuntu-22.04-arm", "cibw-build-id": "cp312-*"},
            {"python-version": "3.11", "arch": "aarch64", "runner": "ubuntu-22.04-arm", "cibw-build-id": "cp311-*"},
            {"python-version": "3.10", "arch": "aarch64", "runner": "ubuntu-22.04-arm", "cibw-build-id": "cp310-*"},
            {"python-version": "3.9", "arch": "aarch64", "runner": "ubuntu-22.04-arm", "cibw-build-id": "cp39-*"},
            {"python-version": "3.8", "arch": "aarch64", "runner": "ubuntu-22.04-arm", "cibw-build-id": "cp38-*"},
            {"python-version": "3.7", "arch": "aarch64", "runner": "ubuntu-22.04-arm", "cibw-build-id": "cp37-*"}
          ]'

          # --- Define Full Matrix for Python 3.6 ---
          full_py36_matrix='[
            {"arch": "x86_64", "runner": "ubuntu-latest"},
            {"arch": "aarch64", "runner": "ubuntu-22.04-arm"}
          ]'

          # --- Filter logic ---
          if [[ "${{ github.event_name }}" != "workflow_dispatch" || ( -z "$py_ver" && -z "$arch" ) ]]; then
            echo "Running full matrix for all versions."
            echo "modern_matrix=$(echo $full_modern_matrix | jq -c .)" >> $GITHUB_OUTPUT
            echo "py36_matrix=$(echo $full_py36_matrix | jq -c .)" >> $GITHUB_OUTPUT
          else
            echo "Filtering matrix based on inputs: python-version='${py_ver}', arch='${arch}'"
            # Filter modern matrix
            if [[ -z "$py_ver" || "$py_ver" != "3.6" ]]; then
              filter_expression="."
              if [[ -n "$py_ver" ]]; then filter_expression+=" | map(select(.\"python-version\" == \"$py_ver\"))"; fi
              if [[ -n "$arch" ]]; then filter_expression+=" | map(select(.arch == \"$arch\"))"; fi
              filtered_modern_matrix=$(echo "$full_modern_matrix" | jq -c "$filter_expression")
              echo "modern_matrix=$filtered_modern_matrix" >> $GITHUB_OUTPUT
            else
              echo "modern_matrix=[]" >> $GITHUB_OUTPUT # No modern builds if py3.6 is selected
            fi

            # Filter py36 matrix
            if [[ -z "$py_ver" || "$py_ver" == "3.6" ]]; then
              filter_expression="."
              if [[ -n "$arch" ]]; then filter_expression+=" | map(select(.arch == \"$arch\"))"; fi
              filtered_py36_matrix=$(echo "$full_py36_matrix" | jq -c "$filter_expression")
              echo "py36_matrix=$filtered_py36_matrix" >> $GITHUB_OUTPUT
            else
              echo "py36_matrix=[]" >> $GITHUB_OUTPUT # No py3.6 builds if another version is selected
            fi
          fi

  build_wheels_modern:
    name: Build wheels for Python ${{ matrix.python-version }} on ${{ matrix.arch }}
    needs: setup-matrix
    # Only run if the matrix is not empty
    if: ${{ fromJson(needs.setup-matrix.outputs.modern_matrix) != '[]' }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        # Dynamically include the matrix generated by the setup job
        include: ${{ fromJson(needs.setup-matrix.outputs.modern_matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare build environment
        run: bash ./scripts/prepare_python_build.sh ${{ matrix.python-version }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.1
        with:
          package-dir: python
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.cibw-build-id }}
          CIBW_TEST_COMMAND: "pip install numpy && ls -alF /project/ && python /project/examples/python/example_hnsw.py"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_wheels_py36:
    name: Build wheels for Python 3.6 on ${{ matrix.arch }}
    needs: setup-matrix
    # Only run if the matrix is not empty
    if: ${{ fromJson(needs.setup-matrix.outputs.py36_matrix) != '[]' }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        # Dynamically include the matrix generated by the setup job
        include: ${{ fromJson(needs.setup-matrix.outputs.py36_matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare build environment for Python 3.6
        run: bash ./scripts/prepare_python_build.sh 3.6

      - name: Build wheels for Python 3.6
        uses: pypa/cibuildwheel@v2.11.4
        with:
          package-dir: python
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: "cp36-*"
          CIBW_TEST_COMMAND: "pip install numpy && ls -alF /project/ && python /project/examples/python/example_hnsw.py"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-3.6-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  publish:
    name: Publish packages
    needs: [build_wheels_modern, build_wheels_py36]
    runs-on: ubuntu-latest
    # The `if: always()` ensures this job runs even if one of the build jobs is skipped
    # because its matrix was empty. We check for files later.
    if: always() && (github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List distribution files
        id: list_files
        run: |
          if [ -z "$(ls -A dist)" ]; then
            echo "No build artifacts found. Skipping publish."
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Found artifacts to publish."
            ls -la dist/
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to TestPyPI
        if: steps.list_files.outputs.should_publish == 'true' && github.event_name == 'push'
        uses: pypa/gh-action-pypi-publish@v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

      - name: Publish to PyPI
        if: steps.list_files.outputs.should_publish == 'true' && github.event_name == 'release' && github.event.action == 'published'
        uses: pypa/gh-action-pypi-publish@v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Upload to GitHub Release
        if: steps.list_files.outputs.should_publish == 'true' && github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.whl


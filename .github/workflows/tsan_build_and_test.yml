name: Tsan Build & Test Parallel

on:
  push:
    branches: [ "main", "0.*" ]
  pull_request:
    branches: [ "main", "0.*" ]
  workflow_dispatch:

jobs:
  build_tsan:
    name: Build with TSAN
    runs-on: ubuntu-22.04
    concurrency:
      group: test_tsan_x86-${{ github.event.pull_request.number }}
      cancel-in-progress: ${{ github.event_name == 'pull_request' }}
    container:
      image: vsaglib/vsag:ci-x86
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Load Cache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: "5G"
          save: ${{ github.event_name != 'pull_request' }}
          key: build-tsan-${{ hashFiles('./CMakeLists.txt') }}-${{ hashFiles('./.circleci/fresh_ci_cache.commit') }}
      - name: Make Tsan
        run: export CMAKE_GENERATOR="Ninja"; make tsan
      - name: Clean
        run: find ./build -type f -name "*.o" -exec rm -f {} +
      - name: Save Test
        uses: actions/upload-artifact@v4
        with:
          path: ./build
          name: test_x86-${{ github.run_id }}-tsan
          compression-level: 1
          retention-days: 1
          overwrite: 'true'

  test_tsan:
    name: Run TSAN Tests
    needs: build_tsan
    runs-on: ubuntu-22.04
    concurrency:
      group: test_tsan_x86-${{ github.event.pull_request.number }}
      cancel-in-progress: ${{ github.event_name == 'pull_request' }}
    container:
      image: vsaglib/vsag:ci-x86
    steps:
      - uses: actions/checkout@v4
      - name: Clean Env
        run: rm -rf ./build
      - name: Download Test
        uses: actions/download-artifact@v4
        with:
          name: test_x86-${{ github.run_id }}-tsan
          path: ./build/
      - name: Run TSAN tests
        run: |
          echo race:libomp.so > omp.supp
          export TSAN_OPTIONS=suppressions=omp.supp
          chmod +x ./build/tests/functests
          ./build/tests/functests "[concurrent]~[daily]"
